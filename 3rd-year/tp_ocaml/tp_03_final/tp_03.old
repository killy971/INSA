(* Definition des donnees *)

let m1=((0.0,0.0),(0.172,0.496))
let m2=((0.076,0.3122),(0.257,0.204))
let m3=((0.821,(-0.028)),(0.030,0.845))
let m4=((0.024,(-0.356)),(0.323,0.074))

let v1=(1.496,(-0.091))
let v2=(0.494,0.133)
let v3=(0.088,0.176)
let v4=(0.470,0.260);;

(* La construction des transformations affines *)


let mt mat vec = match (mat,vec) with
  	(((a,b),(c,d)),(e,f)) -> (a*.e+.b*.f,c*.e+.d*.f);;

let sv v1 v2 = match (v1,v2) with
	((a,b),(c,d)) -> (a+.c,b+.d);;

let genapplin = function mat -> function x -> mt mat x;;

let gentraffine = function applin -> function vec -> function x -> sv (applin x) vec;;

let applin1 = genapplin m1
let applin2 = genapplin m2
let applin3 = genapplin m3
let applin4 = genapplin m4;;

let les4tr = (gentraffine applin1 v1,gentraffine applin2 v2,gentraffine applin3 v3,gentraffine applin4 v4);;

(* Le choix d'une transformation parmi les 4 *)

let elemrang (a,b,c,d) = match (Random.int 4) with
  	0 -> a
  |	1 -> b
  |	2 -> c
  |	3 -> d;;

let traff = function () -> elemrang les4tr;;

(* La suite des points transformes *)

let suite n =
	let rec suite_aux n t = match n with
		0 -> (0.5,0.)
	|	_ -> t (suite_aux (n-1) t)
	in suite_aux n (traff ());;

(* L'affichage de la suite des points *)

# load "graphics.cma";;

Graphics.open_graph "bouh";;

Graphics.set_color Graphics.black;;

let plot_couple (a,b) = match (a,b) with
	(x,y) -> Graphics.plot x y;;

let plot_enlarge (a,b) = match (a,b) with
	(x,y) -> (x*.100.+.100.,y*.100.+.100.);;

let couple_int_of_float (a,b) = match (a,b) with
	(x,y) -> (int_of_float x,int_of_float y);;

let rec draw it () = match it with
	0 -> ()
|	x -> draw (it-1) (plot_couple (couple_int_of_float (plot_enlarge (suite it))));;

draw 5000 ();;