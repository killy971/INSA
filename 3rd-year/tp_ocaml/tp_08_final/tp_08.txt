(* TP n°8 - Les Fonctionnelles *)

(* Ensembles *)

let liste1 = [3;5;7;9];;
let liste2 = [6;20;9;7];;

let union l1 l2 = List.fold_left (function liste -> function x -> if (List.mem x liste) then liste else x::liste) l1 l2;;

(*
# union liste1 liste2;;
- : int list = [20; 6; 3; 5; 7; 9]
*)

let intersection l1 l2 = List.fold_left (function liste -> function x -> if (List.mem x l1) then x::liste else liste) [] l2;;

(*
# intersection liste1 liste2;;
- : int list = [7; 9]
*)

let touscouples l1 l2 = List.fold_left (function liste -> function x -> liste@(List.map (function y -> (x,y)) l2)) [] l1;;

(*
# touscouples [1;4;7] [8;3];;
- : (int * int) list = [(1, 8); (1, 3); (4, 8); (4, 3); (7, 8); (7, 3)]
*)

let ajout e l = (List.map (function x -> e::x) l)@l;;

let partitions = function l -> List.fold_right ajout l [[]];;
(*
# partitions [1;2;3];;
- : int list list = [[1; 2; 3]; [1; 2]; [1; 3]; [1]; [2; 3]; [2]; [3]; []]
*)

(* Combinateur point fixe *)

(* 1 *)

(* annexe *)

(* 2 - calcule la taille d'une liste *)

g [1;2]	= y f [1;2]
        = f (y f) [1;2]
        = 1+(y f) [2]
        = 1+f (y f) [2]
        = 1+1+(y f) []
        = 1+1+f (y f) []
        = 1+1+0
        = 2

let g = y (function h -> (function [] -> 0 | a::l -> 1+h l));; 

(* 3 *)

let fact = y (function h -> (function 0 -> 1 | x -> x*(h (x-1))));;
