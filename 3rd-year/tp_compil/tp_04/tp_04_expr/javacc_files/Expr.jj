/*
 *
 *       Auteur: Pedrono Marie-Jo
 *
 * 	création : 13 février 2002
 *
 *     nature : projet etudiant
 *
 */


PARSER_BEGIN(Expr)

public class Expr
{	
	// chaine servant pour l'analyse des termes négatifs
	public static String opNegatif = "";
  
	public static void main(String args[]) { 
		Expr analyseur;
		java.io.InputStream input;
		if (args.length==1)
		{
			System.out.print(args[args.length-1] + ": ");
			try
			{
				input = new java.io.FileInputStream(args[args.length-1]);
			}
			catch (java.io.FileNotFoundException e)
			{
				System.out.println("Fichier introuvable.");
				return;
			}
		}
		else if (args.length==0)
		{
			System.out.println("Lecture sur l'entree standard...");
			input = System.in;
		}
		else
		{
			System.out.println("Usage: java Expr[fichier]");
			return;
		}
		try
		{
			analyseur = new Expr(input);
			analyseur.expr();
			System.out.println("analyse reussie!");
			Evaluation.affResultat();
		}
		catch (ParseException e)
		{
			String msg = e.getMessage();
			msg = msg.substring(0,msg.indexOf("\n"));
			System.out.println("Erreur de syntaxe : "+msg);
		}
	}// main 
}// Expr

PARSER_END(Expr)
/***************************************/
/********** TOKEN DEFINITIONS **********/
/***************************************/

TOKEN_MGR_DECLS :
{public static String identLu,chaineLue;
 public static int entierLu;}

/*** Skip whitespace and comments ***/
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "(*"   : IN_COMMENT
}
<IN_COMMENT> MORE:
{
  < ~[] >
}
<IN_COMMENT> SKIP:
{
   < "*)" >  {SwitchTo(DEFAULT);} 
}



/*** unites de base nombres, idents,  strings ***/
TOKEN  :
{
  < #chiffre : ["0"-"9"] >
| < entier : (<chiffre>)+ > 
	{ entierLu = Integer.parseInt(image.toString());
        }
| < #lettre: ["A"-"Z","a"-"z"] >
| < ident : <lettre> (<lettre> | <chiffre>)* >
	{identLu =image.toString();	
	}
| < chaine : "\"" (~["\""])* "\"" | "'" (~["'"])* "'" >
	{ chaineLue = image.toString();
	 }
}


/**************************************/
/********debut de la grammaire ********/
/**************************************/

void expr() : {}
{
   terme() (opAdd() terme() { Evaluation.opAdd(); })*
} 
void terme() : {}
{
	facteur() (opMult() facteur() { Evaluation.opMult(); })*	
}
void facteur() : {}
{
	opNeg() primaire()  | primaire()
}
void primaire() : {}
{
	"(" expr() ")" | valeur()
}
void valeur() : {}
{
	<entier> {  String entier = (new Integer(ExprTokenManager.entierLu)).toString();
				entier = opNegatif + entier;
				Evaluation.pileVal.push(new Integer(entier));
				opNegatif = "";
			 } | <ident>
}
void opAdd() : {}
{
	"+" { Evaluation.pileOp.push("+"); } | "-" { Evaluation.pileOp.push("-"); }
}
void opMult() : {}
{
	"*" { Evaluation.pileOp.push("*"); } | "/" { Evaluation.pileOp.push("/"); }
}
void opNeg() : {}
{
	"-" { opNegatif = "-"; /* le terme courant est négatif */ }
}